{"ast":null,"code":"import AuthService from '../services/auth.service';\nconst user = JSON.parse(localStorage.getItem('user'));\nconst initialState = user ? {\n  status: {\n    loggedIn: true\n  },\n  user\n} : {\n  status: {\n    loggedIn: false\n  },\n  user: null\n};\nexport const auth = {\n  namespaced: true,\n  state: initialState,\n  actions: {\n    login({\n      commit\n    }, user) {\n      return AuthService.login(user).then(user => {\n        commit('loginSuccess', user);\n        return Promise.resolve(user);\n      }, error => {\n        commit('loginFailure');\n        return Promise.reject(error);\n      });\n    },\n    logout({\n      commit\n    }) {\n      AuthService.logout();\n      commit('logout');\n    },\n    register({\n      commit\n    }, user) {\n      return AuthService.register(user).then(response => {\n        commit('registerSuccess');\n        return Promise.resolve(response.data);\n      }, error => {\n        commit('registerFailure');\n        return Promise.reject(error);\n      });\n    },\n    refreshToken({\n      commit\n    }, accessToken) {\n      commit('refreshToken', accessToken);\n    }\n  },\n  mutations: {\n    loginSuccess(state, user) {\n      state.status.loggedIn = true;\n      state.user = user;\n    },\n    loginFailure(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    },\n    logout(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    },\n    registerSuccess(state) {\n      state.status.loggedIn = false;\n    },\n    registerFailure(state) {\n      state.status.loggedIn = false;\n    },\n    refreshToken(state, accessToken) {\n      state.status.loggedIn = true;\n      state.user = {\n        ...state.user,\n        accessToken: accessToken\n      };\n    }\n  }\n};","map":{"version":3,"names":["AuthService","user","JSON","parse","localStorage","getItem","initialState","status","loggedIn","auth","namespaced","state","actions","login","commit","then","Promise","resolve","error","reject","logout","register","response","data","refreshToken","accessToken","mutations","loginSuccess","loginFailure","registerSuccess","registerFailure"],"sources":["D:/filee/SISTEM-INFORMASI-SEKOLAH-SMKN-1-JETIS-MASTER/frontend/src/store/auth.module.js"],"sourcesContent":["import AuthService from '../services/auth.service';\r\n\r\nconst user = JSON.parse(localStorage.getItem('user'));\r\nconst initialState = user\r\n  ? { status: { loggedIn: true }, user }\r\n  : { status: { loggedIn: false }, user: null };\r\n\r\nexport const auth = {\r\n  namespaced: true,\r\n  state: initialState,\r\n  actions: {\r\n    login({ commit }, user) {\r\n      return AuthService.login(user).then(\r\n        user => {\r\n          commit('loginSuccess', user);\r\n          return Promise.resolve(user);\r\n        },\r\n        error => {\r\n          commit('loginFailure');\r\n          return Promise.reject(error);\r\n        }\r\n      );\r\n    },\r\n    logout({ commit }) {\r\n      AuthService.logout();\r\n      commit('logout');\r\n    },\r\n    register({ commit }, user) {\r\n      return AuthService.register(user).then(\r\n        response => {\r\n          commit('registerSuccess');\r\n          return Promise.resolve(response.data);\r\n        },\r\n        error => {\r\n          commit('registerFailure');\r\n          return Promise.reject(error);\r\n        }\r\n      );\r\n    },\r\n    refreshToken({ commit }, accessToken) {\r\n      commit('refreshToken', accessToken);\r\n    }\r\n  },\r\n  mutations: {\r\n    loginSuccess(state, user) {\r\n      state.status.loggedIn = true;\r\n      state.user = user;\r\n    },\r\n    loginFailure(state) {\r\n      state.status.loggedIn = false;\r\n      state.user = null;\r\n    },\r\n    logout(state) {\r\n      state.status.loggedIn = false;\r\n      state.user = null;\r\n    },\r\n    registerSuccess(state) {\r\n      state.status.loggedIn = false;\r\n    },\r\n    registerFailure(state) {\r\n      state.status.loggedIn = false;\r\n    },\r\n    refreshToken(state, accessToken) {\r\n      state.status.loggedIn = true;\r\n      state.user = { ...state.user, accessToken: accessToken };\r\n    }\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,WAAW,MAAM,0BAA0B;AAElD,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;AACrD,MAAMC,YAAY,GAAGL,IAAI,GACrB;EAAEM,MAAM,EAAE;IAAEC,QAAQ,EAAE;EAAK,CAAC;EAAEP;AAAK,CAAC,GACpC;EAAEM,MAAM,EAAE;IAAEC,QAAQ,EAAE;EAAM,CAAC;EAAEP,IAAI,EAAE;AAAK,CAAC;AAE/C,OAAO,MAAMQ,IAAI,GAAG;EAClBC,UAAU,EAAE,IAAI;EAChBC,KAAK,EAAEL,YAAY;EACnBM,OAAO,EAAE;IACPC,KAAK,CAAC;MAAEC;IAAO,CAAC,EAAEb,IAAI,EAAE;MACtB,OAAOD,WAAW,CAACa,KAAK,CAACZ,IAAI,CAAC,CAACc,IAAI,CACjCd,IAAI,IAAI;QACNa,MAAM,CAAC,cAAc,EAAEb,IAAI,CAAC;QAC5B,OAAOe,OAAO,CAACC,OAAO,CAAChB,IAAI,CAAC;MAC9B,CAAC,EACDiB,KAAK,IAAI;QACPJ,MAAM,CAAC,cAAc,CAAC;QACtB,OAAOE,OAAO,CAACG,MAAM,CAACD,KAAK,CAAC;MAC9B,CAAC,CACF;IACH,CAAC;IACDE,MAAM,CAAC;MAAEN;IAAO,CAAC,EAAE;MACjBd,WAAW,CAACoB,MAAM,EAAE;MACpBN,MAAM,CAAC,QAAQ,CAAC;IAClB,CAAC;IACDO,QAAQ,CAAC;MAAEP;IAAO,CAAC,EAAEb,IAAI,EAAE;MACzB,OAAOD,WAAW,CAACqB,QAAQ,CAACpB,IAAI,CAAC,CAACc,IAAI,CACpCO,QAAQ,IAAI;QACVR,MAAM,CAAC,iBAAiB,CAAC;QACzB,OAAOE,OAAO,CAACC,OAAO,CAACK,QAAQ,CAACC,IAAI,CAAC;MACvC,CAAC,EACDL,KAAK,IAAI;QACPJ,MAAM,CAAC,iBAAiB,CAAC;QACzB,OAAOE,OAAO,CAACG,MAAM,CAACD,KAAK,CAAC;MAC9B,CAAC,CACF;IACH,CAAC;IACDM,YAAY,CAAC;MAAEV;IAAO,CAAC,EAAEW,WAAW,EAAE;MACpCX,MAAM,CAAC,cAAc,EAAEW,WAAW,CAAC;IACrC;EACF,CAAC;EACDC,SAAS,EAAE;IACTC,YAAY,CAAChB,KAAK,EAAEV,IAAI,EAAE;MACxBU,KAAK,CAACJ,MAAM,CAACC,QAAQ,GAAG,IAAI;MAC5BG,KAAK,CAACV,IAAI,GAAGA,IAAI;IACnB,CAAC;IACD2B,YAAY,CAACjB,KAAK,EAAE;MAClBA,KAAK,CAACJ,MAAM,CAACC,QAAQ,GAAG,KAAK;MAC7BG,KAAK,CAACV,IAAI,GAAG,IAAI;IACnB,CAAC;IACDmB,MAAM,CAACT,KAAK,EAAE;MACZA,KAAK,CAACJ,MAAM,CAACC,QAAQ,GAAG,KAAK;MAC7BG,KAAK,CAACV,IAAI,GAAG,IAAI;IACnB,CAAC;IACD4B,eAAe,CAAClB,KAAK,EAAE;MACrBA,KAAK,CAACJ,MAAM,CAACC,QAAQ,GAAG,KAAK;IAC/B,CAAC;IACDsB,eAAe,CAACnB,KAAK,EAAE;MACrBA,KAAK,CAACJ,MAAM,CAACC,QAAQ,GAAG,KAAK;IAC/B,CAAC;IACDgB,YAAY,CAACb,KAAK,EAAEc,WAAW,EAAE;MAC/Bd,KAAK,CAACJ,MAAM,CAACC,QAAQ,GAAG,IAAI;MAC5BG,KAAK,CAACV,IAAI,GAAG;QAAE,GAAGU,KAAK,CAACV,IAAI;QAAEwB,WAAW,EAAEA;MAAY,CAAC;IAC1D;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}