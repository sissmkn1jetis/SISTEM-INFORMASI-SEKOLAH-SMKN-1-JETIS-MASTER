{"ast":null,"code":"import axiosInstance from \"./api\";\nimport TokenService from \"./token.service\";\nconst setup = store => {\n  axiosInstance.interceptors.request.use(config => {\n    const token = TokenService.getLocalAccessToken();\n    if (token) {\n      // config.headers[\"Authorization\"] = 'Bearer ' + token;  // for Spring Boot back-end\n      config.headers[\"x-access-token\"] = token; // for Node.js Express back-end\n    }\n\n    return config;\n  }, error => {\n    return Promise.reject(error);\n  });\n  api.interceptors.response.use(res => {\n    return res;\n  }, async err => {\n    const originalConfig = err.config;\n    if (originalConfig.url !== \"/auth/signin\" && err.response) {\n      // Access Token was expired\n      if (err.response.status === 401 && !originalConfig._retry) {\n        originalConfig._retry = true;\n        try {\n          const rs = await api.post(\"/auth/refreshtoken\", {\n            refreshToken: TokenService.getLocalRefreshToken()\n          });\n          const {\n            accessToken\n          } = rs.data;\n          store.dispatch('auth/refreshToken', accessToken);\n          TokenService.updateLocalAccessToken(accessToken);\n          const refreshTokenExpiry = rs.data.refreshTokenExpiry;\n          TokenService.setRefreshTokenExpiry(refreshTokenExpiry);\n          return api(originalConfig);\n        } catch (_error) {\n          // Handle refresh token expiration, perform logout\n          if (_error.response.status === 403 && _error.response.data.message === \"Refresh token was expired. User logged out.\") {\n            store.commit('auth/logout');\n          }\n          return Promise.reject(_error);\n        }\n      }\n    }\n    return Promise.reject(err);\n  });\n\n  // axiosInstance.interceptors.response.use(\n  //   (res) => {\n  //     return res;\n  //   },\n  //   async (err) => {\n  //     const originalConfig = err.config;\n\n  //     if (originalConfig.url !== \"/auth/signin\" && err.response) {\n  //       // Access Token was expired\n  //       if (err.response.status === 401 && !originalConfig._retry) {\n  //         originalConfig._retry = true;\n\n  //         try {\n  //           const rs = await axiosInstance.post(\"/auth/refreshtoken\", {\n  //             refreshToken: TokenService.getLocalRefreshToken(),\n  //           });\n\n  //           const { accessToken } = rs.data;\n\n  //           store.dispatch('auth/refreshToken', accessToken);\n  //           TokenService.updateLocalAccessToken(accessToken);\n\n  //           return axiosInstance(originalConfig);\n  //         } catch (_error) {\n  //           return Promise.reject(_error);\n  //         }\n  //       }\n  //     }\n\n  //     return Promise.reject(err);\n  //   }\n  // );\n};\n\nexport default setup;","map":{"version":3,"names":["axiosInstance","TokenService","setup","store","interceptors","request","use","config","token","getLocalAccessToken","headers","error","Promise","reject","api","response","res","err","originalConfig","url","status","_retry","rs","post","refreshToken","getLocalRefreshToken","accessToken","data","dispatch","updateLocalAccessToken","refreshTokenExpiry","setRefreshTokenExpiry","_error","message","commit"],"sources":["D:/filee/SISTEM-INFORMASI-SEKOLAH-SMKN-1-JETIS-MASTER/frontend/src/services/setupInterceptors.js"],"sourcesContent":["import axiosInstance from \"./api\";\r\nimport TokenService from \"./token.service\";\r\n\r\nconst setup = (store) => {\r\n  axiosInstance.interceptors.request.use(\r\n    (config) => {\r\n      const token = TokenService.getLocalAccessToken();\r\n      if (token) {\r\n        // config.headers[\"Authorization\"] = 'Bearer ' + token;  // for Spring Boot back-end\r\n        config.headers[\"x-access-token\"] = token; // for Node.js Express back-end\r\n      }\r\n      return config;\r\n    },\r\n    (error) => {\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n\r\n  api.interceptors.response.use(\r\n    (res) => {\r\n      return res;\r\n    },\r\n    async (err) => {\r\n      const originalConfig = err.config;\r\n\r\n      if (originalConfig.url !== \"/auth/signin\" && err.response) {\r\n        // Access Token was expired\r\n        if (err.response.status === 401 && !originalConfig._retry) {\r\n          originalConfig._retry = true;\r\n\r\n          try {\r\n            const rs = await api.post(\"/auth/refreshtoken\", {\r\n              refreshToken: TokenService.getLocalRefreshToken(),\r\n            });\r\n\r\n            const { accessToken } = rs.data;\r\n\r\n            store.dispatch('auth/refreshToken', accessToken);\r\n            TokenService.updateLocalAccessToken(accessToken);\r\n            const refreshTokenExpiry = rs.data.refreshTokenExpiry;\r\n            TokenService.setRefreshTokenExpiry(refreshTokenExpiry);\r\n\r\n            return api(originalConfig);\r\n          } catch (_error) {\r\n            // Handle refresh token expiration, perform logout\r\n            if (_error.response.status === 403 && _error.response.data.message === \"Refresh token was expired. User logged out.\") {\r\n              store.commit('auth/logout');\r\n            }\r\n\r\n            return Promise.reject(_error);\r\n          }\r\n        }\r\n      }\r\n\r\n      return Promise.reject(err);\r\n    }\r\n  );\r\n\r\n  // axiosInstance.interceptors.response.use(\r\n  //   (res) => {\r\n  //     return res;\r\n  //   },\r\n  //   async (err) => {\r\n  //     const originalConfig = err.config;\r\n\r\n  //     if (originalConfig.url !== \"/auth/signin\" && err.response) {\r\n  //       // Access Token was expired\r\n  //       if (err.response.status === 401 && !originalConfig._retry) {\r\n  //         originalConfig._retry = true;\r\n\r\n  //         try {\r\n  //           const rs = await axiosInstance.post(\"/auth/refreshtoken\", {\r\n  //             refreshToken: TokenService.getLocalRefreshToken(),\r\n  //           });\r\n\r\n  //           const { accessToken } = rs.data;\r\n\r\n  //           store.dispatch('auth/refreshToken', accessToken);\r\n  //           TokenService.updateLocalAccessToken(accessToken);\r\n\r\n  //           return axiosInstance(originalConfig);\r\n  //         } catch (_error) {\r\n  //           return Promise.reject(_error);\r\n  //         }\r\n  //       }\r\n  //     }\r\n\r\n  //     return Promise.reject(err);\r\n  //   }\r\n  // );\r\n};\r\n\r\nexport default setup;"],"mappings":"AAAA,OAAOA,aAAa,MAAM,OAAO;AACjC,OAAOC,YAAY,MAAM,iBAAiB;AAE1C,MAAMC,KAAK,GAAIC,KAAK,IAAK;EACvBH,aAAa,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACnCC,MAAM,IAAK;IACV,MAAMC,KAAK,GAAGP,YAAY,CAACQ,mBAAmB,EAAE;IAChD,IAAID,KAAK,EAAE;MACT;MACAD,MAAM,CAACG,OAAO,CAAC,gBAAgB,CAAC,GAAGF,KAAK,CAAC,CAAC;IAC5C;;IACA,OAAOD,MAAM;EACf,CAAC,EACAI,KAAK,IAAK;IACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;EAC9B,CAAC,CACF;EAEDG,GAAG,CAACV,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BU,GAAG,IAAK;IACP,OAAOA,GAAG;EACZ,CAAC,EACD,MAAOC,GAAG,IAAK;IACb,MAAMC,cAAc,GAAGD,GAAG,CAACV,MAAM;IAEjC,IAAIW,cAAc,CAACC,GAAG,KAAK,cAAc,IAAIF,GAAG,CAACF,QAAQ,EAAE;MACzD;MACA,IAAIE,GAAG,CAACF,QAAQ,CAACK,MAAM,KAAK,GAAG,IAAI,CAACF,cAAc,CAACG,MAAM,EAAE;QACzDH,cAAc,CAACG,MAAM,GAAG,IAAI;QAE5B,IAAI;UACF,MAAMC,EAAE,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,oBAAoB,EAAE;YAC9CC,YAAY,EAAEvB,YAAY,CAACwB,oBAAoB;UACjD,CAAC,CAAC;UAEF,MAAM;YAAEC;UAAY,CAAC,GAAGJ,EAAE,CAACK,IAAI;UAE/BxB,KAAK,CAACyB,QAAQ,CAAC,mBAAmB,EAAEF,WAAW,CAAC;UAChDzB,YAAY,CAAC4B,sBAAsB,CAACH,WAAW,CAAC;UAChD,MAAMI,kBAAkB,GAAGR,EAAE,CAACK,IAAI,CAACG,kBAAkB;UACrD7B,YAAY,CAAC8B,qBAAqB,CAACD,kBAAkB,CAAC;UAEtD,OAAOhB,GAAG,CAACI,cAAc,CAAC;QAC5B,CAAC,CAAC,OAAOc,MAAM,EAAE;UACf;UACA,IAAIA,MAAM,CAACjB,QAAQ,CAACK,MAAM,KAAK,GAAG,IAAIY,MAAM,CAACjB,QAAQ,CAACY,IAAI,CAACM,OAAO,KAAK,6CAA6C,EAAE;YACpH9B,KAAK,CAAC+B,MAAM,CAAC,aAAa,CAAC;UAC7B;UAEA,OAAOtB,OAAO,CAACC,MAAM,CAACmB,MAAM,CAAC;QAC/B;MACF;IACF;IAEA,OAAOpB,OAAO,CAACC,MAAM,CAACI,GAAG,CAAC;EAC5B,CAAC,CACF;;EAED;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;AACF,CAAC;;AAED,eAAef,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}