{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axiosInstance from \"./api\";\nimport TokenService from \"./token.service\";\nimport router from \"../router\";\nconst setup = store => {\n  axiosInstance.interceptors.request.use(config => {\n    const token = TokenService.getLocalAccessToken();\n    if (token) {\n      // config.headers[\"Authorization\"] = 'Bearer ' + token;  // for Spring Boot back-end\n      config.headers[\"x-access-token\"] = token; // for Node.js Express back-end\n    }\n\n    return config;\n  }, error => {\n    return Promise.reject(error);\n  });\n  axiosInstance.interceptors.response.use(res => {\n    return res;\n  }, async err => {\n    const originalConfig = err.config;\n    if (originalConfig.url !== \"/auth/signin\" && err.response) {\n      // Access Token was expired\n      if (err.response.status === 401 && !originalConfig._retry) {\n        originalConfig._retry = true;\n        try {\n          const rs = await axiosInstance.post(\"/auth/refreshtoken\", {\n            refreshToken: TokenService.getLocalRefreshToken()\n          });\n          const {\n            accessToken\n          } = rs.data;\n          store.dispatch('auth/refreshToken', accessToken);\n          TokenService.updateLocalAccessToken(accessToken);\n          return axiosInstance(originalConfig);\n        } catch (_error) {\n          // if (store.dispatch('auth/logout')) {\n          //   router.push(\"/login\");\n          // }\n          store.dispatch('auth/logout');\n          router.push(\"/login\");\n          return Promise.reject(_error);\n        }\n      }\n    }\n    return Promise.reject(err);\n  });\n};\nexport default setup;","map":{"version":3,"names":["axiosInstance","TokenService","router","setup","store","interceptors","request","use","config","token","getLocalAccessToken","headers","error","Promise","reject","response","res","err","originalConfig","url","status","_retry","rs","post","refreshToken","getLocalRefreshToken","accessToken","data","dispatch","updateLocalAccessToken","_error","push"],"sources":["D:/filee/SISTEM-INFORMASI-SEKOLAH-SMKN-1-JETIS-MASTER/frontend/src/services/setupInterceptors.js"],"sourcesContent":["import axiosInstance from \"./api\";\r\nimport TokenService from \"./token.service\";\r\nimport router from \"../router\";\r\n\r\nconst setup = (store) => {\r\n  axiosInstance.interceptors.request.use(\r\n    (config) => {\r\n      const token = TokenService.getLocalAccessToken();\r\n      if (token) {\r\n        // config.headers[\"Authorization\"] = 'Bearer ' + token;  // for Spring Boot back-end\r\n        config.headers[\"x-access-token\"] = token; // for Node.js Express back-end\r\n      }\r\n      return config;\r\n    },\r\n    (error) => {\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n  axiosInstance.interceptors.response.use(\r\n    (res) => {\r\n      return res;\r\n    },\r\n    async (err) => {\r\n      const originalConfig = err.config;\r\n\r\n      if (originalConfig.url !== \"/auth/signin\" && err.response) {\r\n        // Access Token was expired\r\n        if (err.response.status === 401 && !originalConfig._retry) {\r\n          originalConfig._retry = true;\r\n\r\n          try {\r\n            const rs = await axiosInstance.post(\"/auth/refreshtoken\", {\r\n              refreshToken: TokenService.getLocalRefreshToken(),\r\n            });\r\n\r\n            const { accessToken } = rs.data;\r\n\r\n            store.dispatch('auth/refreshToken', accessToken);\r\n            TokenService.updateLocalAccessToken(accessToken);\r\n\r\n            return axiosInstance(originalConfig);\r\n          } catch (_error) {\r\n            // if (store.dispatch('auth/logout')) {\r\n            //   router.push(\"/login\");\r\n            // }\r\n            store.dispatch('auth/logout');\r\n            router.push(\"/login\");\r\n            return Promise.reject(_error);\r\n          }\r\n        }\r\n      }\r\n\r\n      return Promise.reject(err);\r\n    }\r\n  );\r\n};\r\n\r\nexport default setup;"],"mappings":";AAAA,OAAOA,aAAa,MAAM,OAAO;AACjC,OAAOC,YAAY,MAAM,iBAAiB;AAC1C,OAAOC,MAAM,MAAM,WAAW;AAE9B,MAAMC,KAAK,GAAIC,KAAK,IAAK;EACvBJ,aAAa,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CACnCC,MAAM,IAAK;IACV,MAAMC,KAAK,GAAGR,YAAY,CAACS,mBAAmB,EAAE;IAChD,IAAID,KAAK,EAAE;MACT;MACAD,MAAM,CAACG,OAAO,CAAC,gBAAgB,CAAC,GAAGF,KAAK,CAAC,CAAC;IAC5C;;IACA,OAAOD,MAAM;EACf,CAAC,EACAI,KAAK,IAAK;IACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;EAC9B,CAAC,CACF;EACDZ,aAAa,CAACK,YAAY,CAACU,QAAQ,CAACR,GAAG,CACpCS,GAAG,IAAK;IACP,OAAOA,GAAG;EACZ,CAAC,EACD,MAAOC,GAAG,IAAK;IACb,MAAMC,cAAc,GAAGD,GAAG,CAACT,MAAM;IAEjC,IAAIU,cAAc,CAACC,GAAG,KAAK,cAAc,IAAIF,GAAG,CAACF,QAAQ,EAAE;MACzD;MACA,IAAIE,GAAG,CAACF,QAAQ,CAACK,MAAM,KAAK,GAAG,IAAI,CAACF,cAAc,CAACG,MAAM,EAAE;QACzDH,cAAc,CAACG,MAAM,GAAG,IAAI;QAE5B,IAAI;UACF,MAAMC,EAAE,GAAG,MAAMtB,aAAa,CAACuB,IAAI,CAAC,oBAAoB,EAAE;YACxDC,YAAY,EAAEvB,YAAY,CAACwB,oBAAoB;UACjD,CAAC,CAAC;UAEF,MAAM;YAAEC;UAAY,CAAC,GAAGJ,EAAE,CAACK,IAAI;UAE/BvB,KAAK,CAACwB,QAAQ,CAAC,mBAAmB,EAAEF,WAAW,CAAC;UAChDzB,YAAY,CAAC4B,sBAAsB,CAACH,WAAW,CAAC;UAEhD,OAAO1B,aAAa,CAACkB,cAAc,CAAC;QACtC,CAAC,CAAC,OAAOY,MAAM,EAAE;UACf;UACA;UACA;UACA1B,KAAK,CAACwB,QAAQ,CAAC,aAAa,CAAC;UAC7B1B,MAAM,CAAC6B,IAAI,CAAC,QAAQ,CAAC;UACrB,OAAOlB,OAAO,CAACC,MAAM,CAACgB,MAAM,CAAC;QAC/B;MACF;IACF;IAEA,OAAOjB,OAAO,CAACC,MAAM,CAACG,GAAG,CAAC;EAC5B,CAAC,CACF;AACH,CAAC;AAED,eAAed,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}