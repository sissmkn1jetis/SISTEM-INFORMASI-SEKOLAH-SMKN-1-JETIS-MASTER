{"ast":null,"code":"import api from \"./api\";\nimport TokenService from \"./token.service\";\nclass AuthService {\n  login({\n    username,\n    password\n  }) {\n    return api.post(\"/auth/signin\", {\n      username,\n      password\n    }).then(response => {\n      if (response.data.accessToken) {\n        TokenService.setUser(response.data);\n      }\n      return response.data;\n    });\n  }\n  refreshToken({\n    commit\n  }) {\n    try {\n      const response = api.post(\"/auth/refreshtoken\", {\n        refreshToken: TokenService.getLocalRefreshToken()\n      });\n      const {\n        accessToken,\n        refreshToken,\n        refreshTokenExpiry\n      } = response.data;\n      commit(\"refreshToken\", accessToken);\n      TokenService.updateLocalAccessToken(accessToken);\n      TokenService.setRefreshTokenExpiry(refreshTokenExpiry);\n      TokenService.setUser({\n        accessToken,\n        refreshToken\n      });\n      return Promise.resolve(accessToken);\n    } catch (error) {\n      // Handle refresh token expiration, perform logout\n      if (error.response.status === 403 && error.response.data.message === \"Refresh token was expired. User logged out.\") {\n        commit(\"logout\");\n      }\n      return Promise.reject(error);\n    }\n  }\n  logout() {\n    TokenService.removeUser();\n  }\n  register({\n    username,\n    email,\n    password,\n    confPassword,\n    roleId\n  }) {\n    return api.post(\"/auth/signup\", {\n      username,\n      email,\n      password,\n      confPassword,\n      roleId\n    });\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["api","TokenService","AuthService","login","username","password","post","then","response","data","accessToken","setUser","refreshToken","commit","getLocalRefreshToken","refreshTokenExpiry","updateLocalAccessToken","setRefreshTokenExpiry","Promise","resolve","error","status","message","reject","logout","removeUser","register","email","confPassword","roleId"],"sources":["D:/filee/SISTEM-INFORMASI-SEKOLAH-SMKN-1-JETIS-MASTER/frontend/src/services/auth.service.js"],"sourcesContent":["import api from \"./api\";\r\nimport TokenService from \"./token.service\";\r\n\r\nclass AuthService {\r\n  login({ username, password }) {\r\n    return api\r\n      .post(\"/auth/signin\", {\r\n        username,\r\n        password\r\n      })\r\n      .then((response) => {\r\n        if (response.data.accessToken) {\r\n          TokenService.setUser(response.data);\r\n        }\r\n\r\n        return response.data;\r\n      });\r\n  }\r\n\r\n  refreshToken({ commit }) {\r\n    try {\r\n      const response = api.post(\"/auth/refreshtoken\", {\r\n        refreshToken: TokenService.getLocalRefreshToken(),\r\n      });\r\n\r\n      const { accessToken, refreshToken, refreshTokenExpiry } = response.data;\r\n\r\n      commit(\"refreshToken\", accessToken);\r\n      TokenService.updateLocalAccessToken(accessToken);\r\n      TokenService.setRefreshTokenExpiry(refreshTokenExpiry);\r\n      TokenService.setUser({ accessToken, refreshToken });\r\n\r\n      return Promise.resolve(accessToken);\r\n    } catch (error) {\r\n      // Handle refresh token expiration, perform logout\r\n      if (error.response.status === 403 && error.response.data.message === \"Refresh token was expired. User logged out.\") {\r\n        commit(\"logout\");\r\n      }\r\n\r\n      return Promise.reject(error);\r\n    }\r\n  }\r\n\r\n  logout() {\r\n    TokenService.removeUser();\r\n  }\r\n\r\n  register({ username, email, password, confPassword, roleId }) {\r\n    return api.post(\"/auth/signup\", {\r\n      username,\r\n      email,\r\n      password,\r\n      confPassword,\r\n      roleId\r\n    });\r\n  }\r\n}\r\n\r\nexport default new AuthService();"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AACvB,OAAOC,YAAY,MAAM,iBAAiB;AAE1C,MAAMC,WAAW,CAAC;EAChBC,KAAK,CAAC;IAAEC,QAAQ;IAAEC;EAAS,CAAC,EAAE;IAC5B,OAAOL,GAAG,CACPM,IAAI,CAAC,cAAc,EAAE;MACpBF,QAAQ;MACRC;IACF,CAAC,CAAC,CACDE,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAIA,QAAQ,CAACC,IAAI,CAACC,WAAW,EAAE;QAC7BT,YAAY,CAACU,OAAO,CAACH,QAAQ,CAACC,IAAI,CAAC;MACrC;MAEA,OAAOD,QAAQ,CAACC,IAAI;IACtB,CAAC,CAAC;EACN;EAEAG,YAAY,CAAC;IAAEC;EAAO,CAAC,EAAE;IACvB,IAAI;MACF,MAAML,QAAQ,GAAGR,GAAG,CAACM,IAAI,CAAC,oBAAoB,EAAE;QAC9CM,YAAY,EAAEX,YAAY,CAACa,oBAAoB;MACjD,CAAC,CAAC;MAEF,MAAM;QAAEJ,WAAW;QAAEE,YAAY;QAAEG;MAAmB,CAAC,GAAGP,QAAQ,CAACC,IAAI;MAEvEI,MAAM,CAAC,cAAc,EAAEH,WAAW,CAAC;MACnCT,YAAY,CAACe,sBAAsB,CAACN,WAAW,CAAC;MAChDT,YAAY,CAACgB,qBAAqB,CAACF,kBAAkB,CAAC;MACtDd,YAAY,CAACU,OAAO,CAAC;QAAED,WAAW;QAAEE;MAAa,CAAC,CAAC;MAEnD,OAAOM,OAAO,CAACC,OAAO,CAACT,WAAW,CAAC;IACrC,CAAC,CAAC,OAAOU,KAAK,EAAE;MACd;MACA,IAAIA,KAAK,CAACZ,QAAQ,CAACa,MAAM,KAAK,GAAG,IAAID,KAAK,CAACZ,QAAQ,CAACC,IAAI,CAACa,OAAO,KAAK,6CAA6C,EAAE;QAClHT,MAAM,CAAC,QAAQ,CAAC;MAClB;MAEA,OAAOK,OAAO,CAACK,MAAM,CAACH,KAAK,CAAC;IAC9B;EACF;EAEAI,MAAM,GAAG;IACPvB,YAAY,CAACwB,UAAU,EAAE;EAC3B;EAEAC,QAAQ,CAAC;IAAEtB,QAAQ;IAAEuB,KAAK;IAAEtB,QAAQ;IAAEuB,YAAY;IAAEC;EAAO,CAAC,EAAE;IAC5D,OAAO7B,GAAG,CAACM,IAAI,CAAC,cAAc,EAAE;MAC9BF,QAAQ;MACRuB,KAAK;MACLtB,QAAQ;MACRuB,YAAY;MACZC;IACF,CAAC,CAAC;EACJ;AACF;AAEA,eAAe,IAAI3B,WAAW,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}